//auto-generated
package mikufan.cx.generate.appender;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Commonly used util for adding things before class declaration
 */
public class CommonAppender {
  public void addPackage(StringBuilder classStringBuilder, String yourPackage) {
    classStringBuilder.append("package ").append(yourPackage).append(";\n");
  }

  public void addImport(StringBuilder classStringBuilder) {
    classStringBuilder.append(
        "import lombok.*;\n" +
            "import lombok.experimental.FieldDefaults;\n" +
            "import lombok.extern.jackson.Jacksonized;\n\n" +
            "import java.util.List;\n");
  }

  public void addImportForGeneric(StringBuilder classStringBuilder) {
    classStringBuilder.append(
        "import lombok.*;\n" +
            "import lombok.experimental.*;\n" +
            "import lombok.extern.jackson.Jacksonized;\n\n" +
            "import java.util.List;\n");
  }

  public void addBasicLombokAnnotationOnClass(StringBuilder classStringBuilder) {
    classStringBuilder.append("@Getter @ToString\n");
    classStringBuilder.append("@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n");
  }

  public void addBasicLombokAnnotationOnGenericClass(StringBuilder classStringBuilder) {
    // keep it separate from concrete class generation
    classStringBuilder.append("@Getter @ToString\n");
    classStringBuilder.append("@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)\n");
  }

  public void addConstructorLombokAnnotationOnClass(StringBuilder classStringBuilder) {
    classStringBuilder.append("@Builder(toBuilder = true) @Jacksonized\n");
  }

  public void addConstructorLombokAnnotationOnGenericClass(StringBuilder classStringBuilder) {
    classStringBuilder.append("@SuperBuilder(toBuilder = true) @Jacksonized\n");
  }

  public void addComments(StringBuilder classStringBuilder) {
    classStringBuilder.append("// auto-generated by get-my-vocadb-java-model at ")
        .append(LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)).append("\n");

  }
}
